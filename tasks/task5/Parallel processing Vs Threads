Threading is usually referred to having multiple processes working at the same time on a single CPU(well actually not you think they do but they switch very fast between them).
Parallelism is having multiple processes working at the same time on multiple CPU's
Both have their pros and cons heavily depending on the scheduler used by your operating system.
Usually the computation cost of creating a thread is much lower then spawning a process on another CPU,
however having a 'whole' CPU for yourself increases the overall speed of that process. 
But then again if that process needs to communicate with another process on another CPU you need to solve the IPC (inter process communication)
problem which might be such an overhead that it is effectively better to just use a thread on the same CPU.
Most operating system are aware of multiple CPU's/Cores and can use them, but this makes the scheduler usually quite complex.
If your are programming in a language that uses a VM (virtual machine), be aware that they need to implement their own scheduler (if at all). 
Python for example uses a GIL,
which pretty much says that everything running on that VM stays on the same CPU, always.
Though some OS's are capable of migrating a heavy process to another CPU that isn't so busy at the moment, 
which of course means that the whole process needs to be paused while it is doing that.
Some operating systems like DragonFlyBSD take a whole different approach to scheduling then what at this moment is the 'standard' approach.
